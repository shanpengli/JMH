vcov <- fit$vcov
View(vcov)
fit$sebeta
fit$beta
fit$sebeta
fit$tau
fit$setau
fit$gamma1
fit$segamma1
fit$gamma2
fit$segamma2
fit$alpha1
fit$sealpha1
fit$alpha2
fit$sealpha2
fit$vee1
fit$sevee1
fit$Sig
fit$seSig
object <- fit
Estimate <- object$gamma1
SE <- object$segamma1
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out
paste(out[, 1], out[, 2], sep = "_")
Estimate <- object$beta
SE <- object$sebeta
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, SE, LowerLimit, UpperLimit, pval)
out <- cbind(rownames(out), out)
##Estimates of tau
Estimate <- object$tau
SE <- object$setau
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out2 <- data.frame(Estimate, SE, LowerLimit, UpperLimit, pval)
out2 <- cbind(rownames(out2), out2)
out3 <- rbind(out, out2)
Estimate <- object$beta
SE <- object$sebeta
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, SE, LowerLimit, UpperLimit, pval)
out
long.formula = Y ~ Z1 + Z2 + Z3 + time
all.vars(long.formula)
long <- all.vars(long.formula)
beta <- object$beta
names(beta) <- c("intercept", long[-1])
beta
Estimate <- beta
Estimate <- object$beta
SE <- object$sebeta
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, SE, LowerLimit, UpperLimit, pval)
out
Estimate
names(Estimate) <- c("intercept", long[-1])
SE <- object$sebeta
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, SE, LowerLimit, UpperLimit, pval)
out
out <- cbind(rownames(out), out)
out
tau <- object$tau
variance.var = c("Z1", "Z2", "Z3", "time")
names(tau) <- paste0(c("intercept", variance.var), "_var")
tau
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3
survival <- all.vars(surv.formula)
survival
gamma1 <- object$gamma1
names(gamma1) <- survival[-(1:2)]
gamma1
names(gamma1) <- paste0(survival[-(1:2)], "_1")
gamma1
devtools::load_all()
library(JMH)
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, ID = "ID", RE = "time",
model = "interslope", print.para = TRUE)
b <- proc.time()
time <- (b - a)[3]
fit$beta
fit$tau
object <- fit
if (!inherits(object, "JMH"))
stop("Use only with 'JMH' objects.\n")
digits = 4
Estimate <- object$beta
SE <- object$sebeta
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, SE, LowerLimit, UpperLimit, pval)
out <- cbind(rownames(out), out)
rownames(out) <- NULL
colnames(out)[1] <- "Parameter"
##Estimates of tau
Estimate <- object$tau
SE <- object$setau
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out2 <- data.frame(Estimate, SE, LowerLimit, UpperLimit, pval)
out2 <- cbind(rownames(out2), out2)
rownames(out2) <- NULL
colnames(out2)[1] <- "Parameter"
out3 <- rbind(out, out2)
rownames(out3) <- NULL
names(out3) <- c("Longitudinal", "coef", "SE", "95%Lower", "95%Upper", "p-values")
out3[, 2:ncol(out3)] <- round(out3[, 2:ncol(out3)], digits = digits)
out3[, ncol(out3)] <- format(out3[, ncol(out3)], scientific = FALSE)
out3
object$gamma1
object$gamma2
Estimate <- object$gamma1
SE <- object$segamma1
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out[, 1] <- paste(out[, 1], out[, 2], sep = "_")
out <- out[, -2]
names(out) <- c("Survival", "coef", "exp(coef)", "SE(coef)", "95%Lower", "95%Upper", "p-values")
Estimate <- object$gamma1
SE <- object$segamma1
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out[, 1] <- paste(out[, 1], out[, 2], sep = "_")
out
Estimate <- object$gamma1
SE <- object$segamma1
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out
out <- cbind(rownames(out), out)
out
Estimate <- object$gamma1
SE <- object$segamma1
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out <- cbind(rownames(out), out)
rownames(out) <- NULL
colnames(out)[1] <- "Parameter"
out
names(out) <- c("Survival", "coef", "exp(coef)", "SE(coef)", "95%Lower", "95%Upper", "p-values")
Estimate <- object$gamma1
SE <- object$segamma1
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out <- cbind(rownames(out), out)
rownames(out) <- NULL
colnames(out)[1] <- "Parameter"
Estimate <- object$gamma2
SE <- object$segamma2
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out2 <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out2 <- cbind(rownames(out2), out2)
rownames(out2) <- NULL
colnames(out2)[1] <- "Parameter"
out3 <- rbind(out, out2)
names(out3) <- c("Survival", "coef", "exp(coef)", "SE(coef)", "95%Lower", "95%Upper", "p-values")
out3
Estimate <- object$alpha1
if (length(Estimate) == 2) names(Estimate) <- c("alpha1_1", "alpha1_2")
SE <- object$sealpha1
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out <- cbind(rownames(out), out)
rownames(out) <- NULL
colnames(out)[1] <- "Parameter"
out
##gamma
Estimate <- object$gamma1
SE <- object$segamma1
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out <- cbind(rownames(out), out)
rownames(out) <- NULL
colnames(out)[1] <- "Parameter"
Estimate <- object$gamma2
SE <- object$segamma2
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out2 <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out2 <- cbind(rownames(out2), out2)
rownames(out2) <- NULL
colnames(out2)[1] <- "Parameter"
outgamma <- rbind(out, out2)
names(outgamma) <- c("Survival", "coef", "exp(coef)", "SE(coef)", "95%Lower", "95%Upper", "p-values")
outgamma
Estimate <- object$alpha1
if (length(Estimate) == 2) names(Estimate) <- c("alpha1_1", "alpha1_2")
SE <- object$sealpha1
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out <- cbind(rownames(out), out)
rownames(out) <- NULL
colnames(out)[1] <- "Parameter"
Estimate <- object$alpha2
if (length(Estimate) == 2) names(Estimate) <- c("alpha1_1", "alpha1_2")
SE <- object$sealpha2
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out2 <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out2 <- cbind(rownames(out2), out2)
rownames(out2) <- NULL
colnames(out2)[1] <- "Parameter"
outalpha <- rbind(out, out2)
names(outalpha) <- c("Survival", "coef", "exp(coef)", "SE(coef)", "95%Lower", "95%Upper", "p-values")
outalpha
Estimate <- c(object$vee1, object$vee2)
names(Estimate) <- c("vee1", "vee2")
SE <- c(object$sevee1, object$sevee2)
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out <- cbind(rownames(out), out)
rownames(out) <- NULL
colnames(out)[1] <- "Parameter"
out
Estimate <- object$gamma1
SE <- object$segamma1
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out <- cbind(rownames(out), out)
rownames(out) <- NULL
colnames(out)[1] <- "Parameter"
Estimate <- object$gamma2
SE <- object$segamma2
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out2 <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out2 <- cbind(rownames(out2), out2)
rownames(out2) <- NULL
colnames(out2)[1] <- "Parameter"
outgamma <- rbind(out, out2)
names(outgamma) <- c("Survival", "coef", "exp(coef)", "SE(coef)", "95%Lower", "95%Upper", "p-values")
##alpha
Estimate <- object$alpha1
if (length(Estimate) == 2) names(Estimate) <- c("alpha1_1", "alpha1_2")
SE <- object$sealpha1
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out <- cbind(rownames(out), out)
rownames(out) <- NULL
colnames(out)[1] <- "Parameter"
Estimate <- object$alpha2
if (length(Estimate) == 2) names(Estimate) <- c("alpha1_1", "alpha1_2")
SE <- object$sealpha2
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out2 <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out2 <- cbind(rownames(out2), out2)
rownames(out2) <- NULL
colnames(out2)[1] <- "Parameter"
outalpha <- rbind(out, out2)
names(outalpha) <- c("Survival", "coef", "exp(coef)", "SE(coef)", "95%Lower", "95%Upper", "p-values")
#vee
Estimate <- c(object$vee1, object$vee2)
names(Estimate) <- c("vee1", "vee2")
SE <- c(object$sevee1, object$sevee2)
LowerLimit <- Estimate - 1.96 * SE
UpperLimit <- Estimate + 1.96 * SE
zval = (Estimate/SE)
pval = 2 * pnorm(-abs(zval))
out <- data.frame(Estimate, exp(Estimate), SE, LowerLimit, UpperLimit, pval)
out <- cbind(rownames(out), out)
rownames(out) <- NULL
colnames(out)[1] <- "Parameter"
names(out) <- c("Survival", "coef", "exp(coef)", "SE(coef)", "95%Lower", "95%Upper", "p-values")
out <- rbind(outgamma, outalpha, out)
out
out[, 2:ncol(out)] <- round(out[, 2:ncol(out)], digits = digits)
out[, ncol(out)] <- format(out[, ncol(out)], scientific = FALSE)
out
devtools::load_all()
library(JMH)
devtools::document()
N = 200
data <- simJMdata(N = N, seed = 10, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, ID = "ID", RE = "time",
model = "interslope", print.para = TRUE)
b <- proc.time()
time <- (b - a)[3]
summary(fit, coeff = "longitudinal")
fit
summary(fit, coeff = "longitudinal")
summary(fit, coeff = "survival")
summary.JMH(fit, coeff = "survival")
n200se <- summary.JMH(fit, coeff = "survival")
N = 100
data <- simJMdata(N = N, seed = 10, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, ID = "ID", RE = "time",
model = "interslope", print.para = TRUE)
b <- proc.time()
time <- (b - a)[3]
n100se <- summary.JMH(fit, coeff = "survival")
View(n100se)
n100se
n200se
N = 100
data <- simJMdata(N = N, seed = 10, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 25, ID = "ID", RE = "time",
model = "interslope", print.para = TRUE)
b <- proc.time()
time <- (b - a)[3]
n100se <- summary.JMH(fit, coeff = "survival")
n100se
N = 200
data <- simJMdata(N = N, seed = 10, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 25, ID = "ID", RE = "time",
model = "interslope", print.para = TRUE)
b <- proc.time()
time <- (b - a)[3]
n200se <- summary.JMH(fit, coeff = "survival")
n200se
n100se
devtools::load_all()
library(JMH)
sim = 2
N = 200
lambda1 = 0.05
lambda2 = 0.1
tau = c(0.5, 0.5, -0.2, 0.2, 0.05)
CL = 4
CU = 8
seed = 10
maxiter = 1000
increment = 0.25
quadpoint = 15
ncores = 10
ncores = 2
ParaMatrixRaw <- parallel::mclapply(1:sim, bootsfit,
N = N, lambda1 = lambda1, lambda2 = lambda2,
tau = tau,
CL = CL, CU = CU, seed = seed, maxiter = maxiter,
increment = increment, quadpoint = quadpoint,
mc.cores = ncores)
ParaMatrixRaw[[1]]$coef
ParaMatrixRaw[[1]]$coefSE
devtools::load_all()
library(JMH)
test <- JMH::simfit(sim = 2, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 25, ncores = 2)
test <- JMH::simfit(sim = 2, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 15, ncores = 2)
test$paramatrixSE
test$paramatrix
N = 800
data <- simJMdata(N = N, seed = 10, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 25, ID = "ID", RE = "time",
model = "interslope", print.para = TRUE)
b <- proc.time()
time <- (b - a)[3]
time
n800se <- summary.JMH(fit, coeff = "survival")
n800se <- summary(fit, coeff = "survival")
n800se
n200se
summary(fit, coeff = "longitudinal")
vcov <- fit$vcov
vcov <- sqrt(vcov)
View(vcov)
summary(fit, coeff = "longitudinal")
summary(fit, coeff = "survival")
require(JMH)
N600q25 <- JMH::simfit(sim = 100, N = 600, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 25, ncores = 11)
N600q30 <- JMH::simfit(sim = 100, N = 600, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 30, ncores = 11)
N600q35 <- JMH::simfit(sim = 100, N = 600, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 35, ncores = 11)
save.image("~/Desktop/GSR CODES/2021/2021 summer/JMHSim/N600q23.RData")
N200q30 <- JMH::simfit(sim = 100, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 30, ncores = 11)
N200q35 <- JMH::simfit(sim = 100, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 35, ncores = 11)
save.image("~/Desktop/GSR CODES/2021/2021 summer/JMHSim/N600q23.RData")
N200q30new <- JMH::simfit(sim = 100, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.5, quadpoint = 30, ncores = 11)
N200q35new <- JMH::simfit(sim = 100, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.5, quadpoint = 35, ncores = 11)
save.image("~/Desktop/GSR CODES/2021/2021 summer/JMHSim/N600q23.RData")
