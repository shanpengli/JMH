ydata <- data$ydata
cdata <- data$cdata
View(cdata)
library(JMH)
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.formula = ~ Z1 + time,
quadpoint = 6, random = ~ timens1 + timens2|ID, epsilon = 1e-3, print.para = TRUE)
data <- simJMdatahomo(i = 1, N = 800, lambda1 = 0.05, lambda2 = 0.15,
beta = c(5, 1.5, 2, 1, 2),
sigma2 = exp(0.5),
gamma1 = c(1, 0.5, 0.5),
gamma2 = c(-0.5, 0.5, 0.25),
alpha1 = c(0.05, 0.01, 0.02),
alpha2 = c(-0.05, 0.02, 0.1),
CL = 4, CU = 8,
sigb = matrix(c(10, 3, 2, 3, 4, 2, 2, 2, 4), nrow = 3),
seed = 10, increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.formula = ~ Z1 + time,
quadpoint = 6, random = ~ time|ID, epsilon = 1e-3, print.para = TRUE)
fit.FastJM <- FastJM::jmcs(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + timens1 + timens2,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
quadpoint = 6, random = ~ timens1 + timens2|ID, tol = 1e-3, print.para = TRUE)
exp(0.5)
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/simJMdatahomo.R")
data <- simJMdatahomo(i = 1, N = 800, lambda1 = 0.05, lambda2 = 0.15,
beta = c(5, 1.5, 2, 1),
sigma2 = exp(0.5),
gamma1 = c(1, 0.5, 0.5),
gamma2 = c(-0.5, 0.5, 0.25),
alpha1 = c(0.05, 0.01, 0.02),
alpha2 = c(-0.05, 0.02, 0.1),
CL = 4, CU = 8,
sigb = matrix(c(10, 3, 2, 3, 4, 2, 2, 2, 4), nrow = 3),
seed = 10, increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
fit.FastJM <- FastJM::jmcs(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + timens1 + timens2,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
quadpoint = 6, random = ~ timens1 + timens2|ID, tol = 1e-3, print.para = TRUE)
data <- simJMdatahomo(i = 1, N = 3000, lambda1 = 0.05, lambda2 = 0.15,
beta = c(5, 1.5, 2, 1),
sigma2 = exp(0.5),
gamma1 = c(1, 0.5, 0.5),
gamma2 = c(-0.5, 0.5, 0.25),
alpha1 = c(0.05, 0.01, 0.02),
alpha2 = c(-0.05, 0.02, 0.1),
CL = 4, CU = 8,
sigb = matrix(c(10, 3, 2, 3, 4, 2, 2, 2, 4), nrow = 3),
seed = 10, increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
fit.FastJM <- FastJM::jmcs(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + timens1 + timens2,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
quadpoint = 6, random = ~ timens1 + timens2|ID, tol = 1e-3, print.para = TRUE)
fit.FastJM <- FastJM::jmcs(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + timens1 + timens2,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
quadpoint = 6, random = ~ timens1 + timens2|ID, tol = 1e-4, print.para = TRUE)
fit <- JMH::JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.formula = ~ Z1 + time,
quadpoint = 6, random = ~ time|ID, epsilon = 1e-3, print.para = TRUE)
?MAEQJMMLSM
Pred <- JMH::MAEQJMMLSM(seed = 100, object = fit, landmark.time = 3, horizon.time = 4:7,
obs.time = "time", method = "GH", n.cv = 4, initial.para = TRUE)
Pred
summary(Pred)
Pred.FastJM <- FastJM::MAEQjmcs(seed = 100, object = fit, landmark.time = 3, horizon.time = 4:7,
obs.time = "time", method = "GH", n.cv = 4, initial.para = TRUE)
Pred.FastJM <- FastJM::MAEQjmcs(seed = 100, object = fit.FastJM, landmark.time = 3, horizon.time = 4:7,
obs.time = "time", method = "GH", n.cv = 4, initial.para = TRUE)
summary(Pred.FastJM)
?PEJMMLSM
?PEjmcs
?AUCJMMLSM
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/simJMdatahomo.R")
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/bootPredhomo.R")
library(JMH)
library(FastJM)
?FastJM::PAjmcs()
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/bootPredhomo.R")
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/bootPredhomo.R")
result.R2 <- list()
for (i in 1:10) {
#result.MAEQ[[i]] <- mclapply(1:10, bootPredhomo,
#seed = 100 + i, N = 3000, metric = "MAEQ", mc.cores = 12)
#result.Brier[[i]] <- mclapply(1:10, bootPredhomo,
#seed = 100 + i, N = 3000, metric = "Brier", mc.cores = 12)
#result.Cindex[[i]] <- mclapply(1:10, bootPredhomo,
#seed = 100 + i, N = 3000, metric = "Cindex", mc.cores = 12)
result.R2[[i]] <- mclapply(1:10, bootPredhomo,
seed = 100 + i, N = 3000, metric = "pseudoR2", mc.cores = 12)
}
library(parallel)
for (i in 1:10) {
#result.MAEQ[[i]] <- mclapply(1:10, bootPredhomo,
#seed = 100 + i, N = 3000, metric = "MAEQ", mc.cores = 12)
#result.Brier[[i]] <- mclapply(1:10, bootPredhomo,
#seed = 100 + i, N = 3000, metric = "Brier", mc.cores = 12)
#result.Cindex[[i]] <- mclapply(1:10, bootPredhomo,
#seed = 100 + i, N = 3000, metric = "Cindex", mc.cores = 12)
result.R2[[i]] <- mclapply(1:10, bootPredhomo,
seed = 100 + i, N = 3000, metric = "pseudoR2", mc.cores = 12)
}
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/simJMdatahomo.R")
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/bootPredhomo.R")
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/simJMdataNLheter.R")
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/bootPredNLheter.R")
result.R2 <- list()
for (i in 1:10) {
#result.MAEQ[[i]] <- mclapply(1:10, bootPredhomo,
#seed = 100 + i, N = 3000, metric = "MAEQ", mc.cores = 12)
#result.Brier[[i]] <- mclapply(1:10, bootPredhomo,
#seed = 100 + i, N = 3000, metric = "Brier", mc.cores = 12)
#result.Cindex[[i]] <- mclapply(1:10, bootPredhomo,
#seed = 100 + i, N = 3000, metric = "Cindex", mc.cores = 12)
result.R2[[i]] <- mclapply(1:10, bootPredhomo,
seed = 100 + i, N = 3000, metric = "pseudoR2", mc.cores = 12)
}
source("~/Desktop/GSR CODES/2024/JMH_revision2/GetPlot.R")
View(getResult)
source("~/Desktop/GSR CODES/2024/JMH_revision2/GetPlot.R")
Result4 <- getResult(result.R2, metric = "pseudoR2")
pseudoR2 <- plotdata(Result4, ylim = c(0, 0.3), ylab = "Pseudo-R2 score",
title.a = "c1. Pseudo-R2 score for failure 1",
title.b = "c2. Pseudo-R2 score for failure 2")
View(getResult)
getResult <- function(object, horizon.time = c(4:7), metric = c("MAEQ", "Others")) {
GetScore <- function(object, horizon.time, metric) {
if (metric == "MAEQ") {
if (is.null(object$MAEQ.cv)) {
stop("The cross validation fails. Please try using a different seed number.")
} else {
if(length(object$MAEQ.cv) == object$n.cv && sum(mapply(is.null, object$MAEQ.cv)) == 0) {
if (object$CompetingRisk) {
sum <- as.data.frame(matrix(0, nrow = length(object$horizon.time), ncol = 3))
sum[, 1] <- object$horizon.time
colnames(sum) <- c("Horizon Time", "CIF1", "CIF2")
for (i in 1:length(object$horizon.time)) {
for (j in 1:object$n.cv) {
sum[i, 2] <- sum[i, 2] + sum(abs(object$MAEQ.cv[[j]]$AllCIF1[[i]][, 1] -
object$MAEQ.cv[[j]]$AllCIF1[[i]][, 2]))/4
sum[i, 3] <- sum[i, 3] + sum(abs(object$MAEQ.cv[[j]]$AllCIF2[[i]][, 1] -
object$MAEQ.cv[[j]]$AllCIF2[[i]][, 2]))/4
}
}
sum[, -1] <- sum[, -1]/object$n.cv
} else {
sum <- as.data.frame(matrix(0, nrow = length(object$horizon.time), ncol = 2))
sum[, 1] <- object$horizon.time
colnames(sum) <- c("Horizon Time", "SurvProb")
for (i in 1:length(object$horizon.time)) {
for (j in 1:object$n.cv) {
sum[i, 2] <- sum[i, 2] + sum(abs(object$MAEQ.cv[[j]]$AllSurv[[i]][, 1] -
object$MAEQ.cv[[j]]$AllSurv[[i]][, 2]))/4
}
}
sum[, -1] <- sum[, -1]/object$n.cv
}
cat("\nSum of absolute error across quintiles of predicted risk scores at the landmark time of", object$landmark.time, "\nbased on", object$n.cv, "fold cross validation\n")
return(sum)
} else {
stop("The cross validation fails. Please try using a different seed number.")
}
}
} else if (metric == "Brier") {
if (is.null(object$Brier.cv)) {
stop("The cross validation fails. Please try using a different seed number.")
} else {
if (length(object$Brier.cv) == object$n.cv && sum(mapply(is.null, object$Brier.cv)) == 0) {
sum <- 0
for (j in 1:object$n.cv) {
sum <- sum + object$Brier.cv[[j]]
}
sum <- sum/object$n.cv
if (object$CompetingRisk) {
mean.Brier1 <- sum[, 1]
mean.Brier2 <- sum[, 2]
ExpectedBrier <- data.frame(object$horizon.time, mean.Brier1, mean.Brier2)
colnames(ExpectedBrier) <- c("Horizon Time", "Brier Score 1", "Brier Score 2")
} else {
mean.Brier1 <- sum[, 1]
ExpectedBrier <- data.frame(object$horizon.time, mean.Brier1)
colnames(ExpectedBrier) <- c("Horizon Time", "Brier Score")
}
cat("\nExpected Brier Score at the landmark time of", object$landmark.time, "\nbased on", object$n.cv, "fold cross validation\n")
return(ExpectedBrier)
} else {
stop("The cross validation fails. Please try using a different seed number.")
}
}
} else if (metric %in% c("AUC", "Cindex")) {
if (is.null(object$AUC.cv)) {
stop("The cross validation fails. Please try using a different seed number.")
} else {
if (length(object$AUC.cv) == object$n.cv && sum(mapply(is.null, object$AUC.cv)) == 0) {
sum <- 0
for (j in 1:object$n.cv) {
sum <- sum + object$AUC.cv[[j]]
}
sum <- sum/object$n.cv
if (object$CompetingRisk) {
AUC1 <- sum[, 1]
AUC2 <- sum[, 2]
ExpectedAUC <- data.frame(object$horizon.time, AUC1, AUC2)
colnames(ExpectedAUC) <- c("Horizon Time", "AUC1", "AUC2")
} else {
AUC <- sum[, 1]
ExpectedAUC <- data.frame(object$horizon.time, AUC)
colnames(ExpectedAUC) <- c("Horizon Time", "AUC")
}
cat("\nExpected AUC at the landmark time of", object$landmark.time, "\nbased on", object$n.cv, "fold cross validation\n")
return(ExpectedAUC)
} else {
stop("The cross validation fails. Please try using a different seed number.")
}
}
} else if (metric == "pseudoR2") {
if (is.null(object$PA.cv)) {
stop("The cross validation fails. Please try using a different seed number.")
} else {
if (length(object$PA.cv) == object$n.cv && sum(mapply(is.null, object$PA.cv)) == 0) {
sum <- matrix(0, nrow = length(object$horizon.time), ncol = 2)
for (j in 1:object$n.cv) {
sum <- sum + object$PA.cv[[j]]
}
sum <- sum/object$n.cv
if (object$CompetingRisk) {
mean.PA1 <- sum[, 1]
mean.PA2 <- sum[, 2]
sum <- round(sum, digits)
ExpectedPA <- data.frame(object$horizon.time, mean.PA1, mean.PA2)
colnames(ExpectedPA) <- c("Horizon Time", "psuedo R square 1", "psuedo R square 2")
} else {
mean.PA1 <- sum[, 1]
sum <- round(sum, digits)
ExpectedPA <- data.frame(object$horizon.time, mean.PA1)
colnames(ExpectedPA) <- c("Horizon Time", "psuedo R square")
}
cat("\nExpected psuedo R square at the landmark time of", object$landmark.time, "\nbased on", object$n.cv, "fold cross validation\n")
return(ExpectedPA)
} else {
stop("The cross validation fails. Please try using a different seed number.")
}
}
} else {
stop("No output.")
}
}
JMHaverage <- matrix(0, nrow = length(horizon.time), ncol = 3)
FastJMaverage <- matrix(0, nrow = length(horizon.time), ncol = 3)
countJMH <- countFastJM <- 0
n <- length(object)
m <- length(object[[1]])
#JMHAll <- FastJMAll <- NULL
for (j in 1:n) {
for (i in 1:m) {
JMH <- try(GetScore(object[[j]][[i]]$Pred, horizon.time = horizon.time, metric = metric),
silent = TRUE)
if (!'try-error' %in% class(JMH)) {
JMHaverage[, 2] <- JMHaverage[, 2] + JMH[, 2]
JMHaverage[, 3] <- JMHaverage[, 3] + JMH[, 3]
JMHaverage[, 1] <- horizon.time
countJMH <- countJMH + 1
}
FastJM <- try(GetScore(object[[j]][[i]]$Pred.FastJM, horizon.time = horizon.time, metric = metric),
silent = TRUE)
if (!'try-error' %in% class(FastJM)) {
FastJMaverage[, 2] <- FastJMaverage[, 2] + FastJM[, 2]
FastJMaverage[, 3] <- FastJMaverage[, 3] + FastJM[, 3]
FastJMaverage[, 1] <- horizon.time
countFastJM <- countFastJM + 1
}
}
#JMHAll <- rbind(JMHAll, JMHaverage)
#FastJMAll <- rbind(FastJMAll, FastJMaverage)
}
JMHaverage[, 2:3] <- JMHaverage[, 2:3]/countJMH
JMHaverage <- as.data.frame(JMHaverage)
FastJMaverage[, 2:3] <- FastJMaverage[, 2:3]/countFastJM
FastJMaverage <- as.data.frame(FastJMaverage)
colnames(JMHaverage) <- colnames(FastJMaverage) <- c("Horizon Time", "CIF1", "CIF2")
return(list(JMHaverage = JMHaverage, FastJMaverage = FastJMaverage))
}
plotdata <- function(Result, ylim, ylab, title.a = NULL, title.b = NULL, y.axis.n.breaks = 10) {
JMHaverage <- Result$JMHaverage
FastJMaverage <- Result$FastJMaverage
library(ggplot2)
CIF <- c(JMHaverage[, 2], JMHaverage[, 3])
Time <- c(JMHaverage[, 1], JMHaverage[, 1])
FailureType <- c(rep("Failure 1", length(JMHaverage[, 1])), rep("Failure 2", length(JMHaverage[, 1])))
Model <- rep("Model 1", 2*length(JMHaverage[, 1]))
DataJMH <- data.frame(CIF, Time, FailureType, Model)
CIF <- c(FastJMaverage[, 2], FastJMaverage[, 3])
Time <- c(FastJMaverage[, 1], FastJMaverage[, 1])
FailureType <- c(rep("Failure 1", length(FastJMaverage[, 1])), rep("Failure 2", length(FastJMaverage[, 1])))
Model <- rep("Model 2", 2*length(FastJMaverage[, 1]))
DataFastJM <- data.frame(CIF, Time, FailureType, Model)
Data <- rbind(DataJMH, DataFastJM)
Data$CIF <- Data$CIF
FA1 <- Data[Data$FailureType == "Failure 1", ]
a1 <- ggplot(data = FA1, aes(x = Time, y = CIF, linetype = Model)) +
geom_line() +
geom_point(aes(shape = Model), size = 2) +
scale_x_continuous(breaks=seq(2, 7, by = 1), limits = c(2, 8),
expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), limits = ylim, n.breaks = y.axis.n.breaks) +
geom_vline(xintercept = 3, linetype="dashed") +
scale_color_manual(values=c('Blue','Black')) +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent",colour = NA),
axis.line = element_line(colour = "black")
) +
xlab("Years from baseline") +
ylab(ylab) +
ggtitle(title.a)
FA2 <- Data[Data$FailureType == "Failure 2", ]
a2 <- ggplot(data = FA2, aes(x = Time, y = CIF, linetype = Model)) +
geom_line() +
geom_point(aes(shape = Model), size = 2) +
scale_x_continuous(breaks=seq(2, 7, by = 1), limits = c(2, 8),
expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0), limits = ylim, n.breaks = y.axis.n.breaks) +
geom_vline(xintercept = 3, linetype="dashed") +
scale_color_manual(values=c('Blue','Black')) +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(fill = "transparent",colour = NA),
axis.line = element_line(colour = "black")
) +
xlab("Years from baseline") +
ylab(ylab) +
ggtitle(title.b)
return(list(a1 = a1, a2 = a2))
}
Result4 <- getResult(result.R2, metric = "pseudoR2")
View(Result4)
View(getResult)
debug(getResult)
Result4 <- getResult(result.R2, metric = "pseudoR2")
JMH
View(getResult)
View(getResult)
View(getResult)
source("~/Desktop/GSR CODES/2024/JMH_revision2/GetPlot.R")
Result4 <- getResult(result.R2, metric = "pseudoR2")
pseudoR2 <- plotdata(Result4, ylim = c(0, 0.3), ylab = "Pseudo-R2 score",
title.a = "c1. Pseudo-R2 score for failure 1",
title.b = "c2. Pseudo-R2 score for failure 2")
pseudoR2$a1
pseudoR2 <- plotdata(Result4, ylim = c(0, 0.15), ylab = "Pseudo-R2 score",
title.a = "c1. Pseudo-R2 score for failure 1",
title.b = "c2. Pseudo-R2 score for failure 2")
pseudoR2 <- plotdata(Result4, ylim = c(0, 0.15), ylab = "Pseudo-R2 score",
title.a = "c1. Pseudo-R2 score for failure 1",
title.b = "c2. Pseudo-R2 score for failure 2")
pseudoR2$a1
pseudoR2$a2
load("~/Desktop/GSR CODES/2024/JMH_revision2/SimData/PredNLhomo.RData")
Result <- getResult(result.MAEQ, metric = "MAEQ")
Result2 <- getResult(result.Brier, metric = "Brier")
Result3 <- getResult(result.Cindex, metric = "Cindex")
Result4 <- getResult(result.R2, metric = "pseudoR2")
MAPE4 <- plotdata(Result, ylim = c(0, 0.1), ylab = "MAPE4 score",
title.a = "a1. MAPE4 score for failure 1",
title.b = "a2. MAPE4 score for failure 2")
Brier <- plotdata(Result2, ylim = c(0, 0.25), ylab = "Brier score",
title.a = "b1. Brier score for failure 1",
title.b = "b2. Brier score for failure 2")
Cindex <- plotdata(Result3, ylim = c(0, 0.75), ylab = "C-index score",
title.a = "c1. C-index score for failure 1",
title.b = "c2. C-index score for failure 2")
library(ggpubr)
ggarrange(MAPE4$a1, Brier$a1, Cindex$a1, pseudoR2$a1,
MAPE4$a2, Brier$a2, Cindex$a2, pseudoR2$a2, nrow = 2, ncol = 4, common.legend = TRUE, legend = "top")
save.image("~/Desktop/GSR CODES/2024/JMH_revision2/SimData/PredNLhomo.RData")
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/simJMdatahomo.R")
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/bootPredhomo.R")
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/simJMdataNLheter.R")
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/bootPredNLheter.R")
source("~/Desktop/GSR CODES/2024/JMH_revision2/GetPlot.R")
library(FastJM)
library(JMH)
library(parallel)
result.MAEQ <- result.Brier <- result.Cindex <- list()
for (i in 5:10) {
result.MAEQ[[i]] <- mclapply(1:10, bootPredNLheter,
seed = 100 + i, N = 3000, metric = "MAEQ", mc.cores = 12)
result.Brier[[i]] <- mclapply(1:10, bootPredNLheter,
seed = 100 + i, N = 3000, metric = "Brier", mc.cores = 12)
result.Cindex[[i]] <- mclapply(1:10, bootPredNLheter,
seed = 100 + i, N = 3000, metric = "Cindex", mc.cores = 12)
}
View(simJMdataNLheter)
View(bootPredNLheter)
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/bootPredNLheter.R")
result.MAEQ <- result.Brier <- result.Cindex <- result.R2 <- list()
result.MAEQ <- result.Brier <- result.Cindex <- result.R2 <- list()
for (i in 1:10) {
if (i>=6) {
result.MAEQ[[i]] <- mclapply(1:10, bootPredNLheter,
seed = 100 + i, N = 3000, metric = "MAEQ", mc.cores = 12)
}
if (i>=5) {
result.Brier[[i]] <- mclapply(1:10, bootPredNLheter,
seed = 100 + i, N = 3000, metric = "Brier", mc.cores = 12)
result.Cindex[[i]] <- mclapply(1:10, bootPredNLheter,
seed = 100 + i, N = 3000, metric = "Cindex", mc.cores = 12)
}
result.R2[[i]] <- mclapply(1:10, bootPredNLheter,
seed = 100 + i, N = 3000, metric = "pseudoR2", mc.cores = 12)
}
save.image("~/Desktop/GSR CODES/2024/JMH_revision2/SimData/PredNLheter.RData")
install()
View(bootPredNLheter)
View(bootPredNLheter)
library(FastJM)
library(JMH)
library(parallel)
for (i in 1:10) {
#result.MAEQ[[i]] <- mclapply(1:10, bootPredhomo,
#seed = 100 + i, N = 3000, metric = "MAEQ", mc.cores = 12)
#result.Brier[[i]] <- mclapply(1:10, bootPredhomo,
#seed = 100 + i, N = 3000, metric = "Brier", mc.cores = 12)
result.Cindex[[i]] <- mclapply(1:10, bootPredhomo,
seed = 100 + i, N = 3000, metric = "Cindex", mc.cores = 12)
#result.R2[[i]] <- mclapply(1:10, bootPredhomo,
#seed = 100 + i, N = 3000, metric = "pseudoR2", mc.cores = 12)
}
for (i in 1:10) {
#result.MAEQ[[i]] <- mclapply(1:10, bootPredNLheter,
#seed = 100 + i, N = 3000, metric = "MAEQ", mc.cores = 12)
#result.Brier[[i]] <- mclapply(1:10, bootPredNLheter,
#seed = 100 + i, N = 3000, metric = "Brier", mc.cores = 12)
result.Cindex[[i]] <- mclapply(1:10, bootPredNLheter,
seed = 100 + i, N = 3000, metric = "Cindex", mc.cores = 12)
#result.R2[[i]] <- mclapply(1:10, bootPredNLheter,
#seed = 100 + i, N = 3000, metric = "pseudoR2", mc.cores = 12)
}
save.image("testNewCindex.Rdata")
save.image("../../../../testNewCindex.Rdata")
library(FastJM)
library(JMH)
library(parallel)
for (i in 1:10) {
#result.MAEQ[[i]] <- mclapply(1:10, bootPredNLheter,
#seed = 100 + i, N = 3000, metric = "MAEQ", mc.cores = 12)
#result.Brier[[i]] <- mclapply(1:10, bootPredNLheter,
#seed = 100 + i, N = 3000, metric = "Brier", mc.cores = 12)
result.Cindex[[i]] <- mclapply(1:10, bootPredNLheter,
seed = 100 + i, N = 3000, metric = "Cindex", mc.cores = 12)
#result.R2[[i]] <- mclapply(1:10, bootPredNLheter,
#seed = 100 + i, N = 3000, metric = "pseudoR2", mc.cores = 12)
}
for (i in 1:10) {
#result.MAEQ[[i]] <- mclapply(1:10, bootPredNLheter,
#seed = 100 + i, N = 3000, metric = "MAEQ", mc.cores = 12)
#result.Brier[[i]] <- mclapply(1:10, bootPredNLheter,
#seed = 100 + i, N = 3000, metric = "Brier", mc.cores = 12)
result.Cindex[[i]] <- mclapply(1:10, bootPredNLheter,
seed = 100 + i, N = 3000, metric = "Cindex", mc.cores = 12)
#result.R2[[i]] <- mclapply(1:10, bootPredNLheter,
#seed = 100 + i, N = 3000, metric = "pseudoR2", mc.cores = 12)
}
save.image("../../../../testNewCindex.RData")
for (i in 1:10) {
result.Cindex[[i]] <- mclapply(1:10, bootPredhomo,
seed = 100 + i, N = 3000, metric = "Cindex", mc.cores = 12)
}
save.image("../../../../testhomoCindex.RData")
install()
### Prediction based on nonlinear + homogeneity
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/simJMdatahomo.R")
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/bootPredhomo.R")
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/simJMdataNLheter.R")
source("~/Desktop/GSR CODES/2024/JMH_revision2/JMH/R/bootPredNLheter.R")
source("~/Desktop/GSR CODES/2024/JMH_revision2/GetPlot.R")
library(FastJM)
library(JMH)
library(parallel)
result.Cindex <- list()
for (i in 1:10) {
#result.MAEQ[[i]] <- mclapply(1:10, bootPredNLheter,
#seed = 100 + i, N = 3000, metric = "MAEQ", mc.cores = 12)
#result.Brier[[i]] <- mclapply(1:10, bootPredNLheter,
#seed = 100 + i, N = 3000, metric = "Brier", mc.cores = 12)
result.Cindex[[i]] <- mclapply(1:10, bootPredNLheter,
seed = 100 + i, N = 3000, metric = "Cindex", mc.cores = 12)
#result.R2[[i]] <- mclapply(1:10, bootPredNLheter,
#seed = 100 + i, N = 3000, metric = "pseudoR2", mc.cores = 12)
}
save.image("../../../../testheterCindex.RData")
result.Cindex <- list()
for (i in 1:10) {
result.Cindex[[i]] <- mclapply(1:10, bootPredhomo,
seed = 100 + i, N = 3000, metric = "Cindex", mc.cores = 12)
}
save.image("../../../../testhomoCindex.RData")
