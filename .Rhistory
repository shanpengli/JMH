surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 20, ID = "ID", RE = "time",
model = "interslope")
b <- proc.time()
b - a
a <- proc.time()
fit <- JMH::JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 16, ID = "ID", RE = "time",
model = "interslope")
b <- proc.time()
b - a
devtools::load_all()
a <- proc.time()
fit <- JMH::JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 16, ID = "ID", RE = "time",
model = "interslope")
b <- proc.time()
b - a
a <- proc.time()
fit <- JMH::JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 20, ID = "ID", RE = "time",
model = "interslope")
b <- proc.time()
b - a
a <- proc.time()
fit <- JMH::JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 25, ID = "ID", RE = "time",
model = "interslope")
b <- proc.time()
b - a
a <- proc.time()
fit <- JMH::JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 25, ID = "ID", RE = "time",
model = "interslope")
b <- proc.time()
b - a
a <- proc.time()
fit <- JMH::JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, ID = "ID", RE = "time",
model = "interslope")
b <- proc.time()
b - a
View(fit)
(b - a)[3]
return(0)
ncol <- length(fit$beta) + length(fit$tau) + length(fit$gamma1) + length(fit$gamma2)
+ length(fit$alpha1) + length(fit$alpha2) + length(fit$vee1) + length(fit$vee2) + 6 + 1
fit$beta[1]
fit$vee1
nrow(fit$Sig)
fit$Sig[1, 1]
devtools::load_all()
devtools::document()
a <- JMH::simfit(sim = 10, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 10, maxiter = 1000,
increment = 0.25, quadpoint = 15, ncores = 10)
devtools::load_all()
a <- JMH::simfit(sim = 10, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 10, maxiter = 1000,
increment = 0.25, quadpoint = 15, ncores = 10)
devtools::load_all()
a <- JMH::simfit(sim = 10, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 10, maxiter = 1000,
increment = 0.25, quadpoint = 15, ncores = 10)
library(JMH)
a <- JMH::simfit(sim = 10, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 10, maxiter = 1000,
increment = 0.25, quadpoint = 15, ncores = 10)
devtools::load_all()
library(JMH)
a <- JMH::simfit(sim = 10, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 10, maxiter = 1000,
increment = 0.25, quadpoint = 15, ncores = 10)
a <- JMH::simfit(sim = 3, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 10, maxiter = 1000,
increment = 0.25, quadpoint = 15, ncores = 3)
a
fit != 0
a[[1]]
is.vector(a[[1]])
paramatrix <- matrix(0, nrow = sim, ncol = 13)
sim = 3
paramatrix <- matrix(0, nrow = sim, ncol = 13)
for (i in 1:sim) {
paramatrix[i, ] <- a[[i]]
}
length(a[[1]])
sim = 3
paramatrix <- matrix(0, nrow = sim, ncol = 29)
for (i in 1:sim) {
paramatrix[i, ] <- a[[i]]
}
View(paramatrix)
for (i in 1:5) colnames(paramatrix)[i] <- paste0("beta_", i-1)
i = 1
paste0("beta_", i-1)
for (i in 1:5) {
colnames(paramatrix)[i] <- paste0("beta_", i-1)
}
paramatrix <- as.data.frame(matrix(0, nrow = sim, ncol = 29))
for (i in 1:sim) {
paramatrix[i, ] <- a[[i]]
}
for (i in 1:5) {
colnames(paramatrix)[i] <- paste0("beta_", i-1)
}
View(paramatrix)
for (i in 1:5) {
colnames(paramatrix)[count] <- paste0("tau_", i-1)
count <- count + 1
}
count <- 1
for (i in 1:5) {
colnames(paramatrix)[count] <- paste0("beta_", i-1)
count <- count + 1
}
for (i in 1:5) {
colnames(paramatrix)[count] <- paste0("tau_", i-1)
count <- count + 1
}
View(paramatrix)
count <- 1
for (i in 1:5) {
colnames(paramatrix)[count] <- paste0("beta_", i-1)
count <- count + 1
}
for (i in 1:5) {
colnames(paramatrix)[count] <- paste0("tau_", i-1)
count <- count + 1
}
for (i in 1:3) {
colnames(paramatrix)[count] <- paste0("gamma1_", i)
count <- count + 1
}
for (i in 1:3) {
colnames(paramatrix)[count] <- paste0("gamma2_", i)
count <- count + 1
}
count <- 1
for (i in 1:5) {
colnames(paramatrix)[count] <- paste0("beta_", i-1)
count <- count + 1
}
for (i in 1:5) {
colnames(paramatrix)[count] <- paste0("tau_", i-1)
count <- count + 1
}
for (i in 1:3) {
colnames(paramatrix)[count] <- paste0("gamma1_", i)
count <- count + 1
}
for (i in 1:3) {
colnames(paramatrix)[count] <- paste0("gamma2_", i)
count <- count + 1
}
for (i in 1:2) {
colnames(paramatrix)[count] <- paste0("alpha1_", i)
count <- count + 1
}
for (i in 1:2) {
colnames(paramatrix)[count] <- paste0("alpha2_", i)
count <- count + 1
}
colnames(paramatrix)[count] <- paste0("vee1")
count <- count + 1
colnames(paramatrix)[count] <- paste0("vee2")
count <- count + 1
for (i in 1:3) {
colnames(paramatrix)[count] <- paste0("Sig_", i, i)
count <- count + 1
}
colnames(paramatrix)[count] <- paste0("Sig_12")
count <- count + 1
colnames(paramatrix)[count] <- paste0("Sig_23")
count <- count + 1
colnames(paramatrix)[count] <- paste0("Sig_13")
count <- count + 1
colnames(paramatrix)[count] <- paste0("Time")
a <- 0
a$beta
devtools::load_all()
library(JMH)
a <- JMH::simfit(sim = 10, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 15, ncores = 10)
devtools::load_all()
library(JMH)
a <- JMH::simfit(sim = 10, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 15, ncores = 10)
View(a)
a <- JMH::simfit(sim = 100, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 15, ncores = 10)
for (j in 1:10) {
data <- JMH::simJMdata(N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 10 + j,
increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
#devtools::load_all()
a <- proc.time()
fit <- JMH::JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, ID = "ID", RE = "time",
model = "interslope")
b <- proc.time()
(b - a)[3]
}
for (j in 1:10) {
writeLines(paste0("Now is running ", j, "th sample!"))
data <- JMH::simJMdata(N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 10 + j,
increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
#devtools::load_all()
a <- proc.time()
fit <- JMH::JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, ID = "ID", RE = "time",
model = "interslope")
b <- proc.time()
(b - a)[3]
}
devtools::load_all()
for (j in 1:10) {
writeLines(paste0("Now is running ", j, "th sample!"))
data <- simJMdata(N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 10 + j,
increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
#devtools::load_all()
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, ID = "ID", RE = "time",
model = "interslope", print.para = FALSE)
b <- proc.time()
(b - a)[3]
}
ncores = 10
sim = 10
N =200
lambda1 = 0.05
lambda2 = 0.1
tau = c(0.5, 0.5, -0.2, 0.2, 0.05)
CL = 4
CU = 8
seed = 10
increment = 0.25
maxiter = 1000
quadpoint=15
cl <- parallel::makeCluster(ncores)
ParaMatrixRaw <- parallel::parLapply(cl, 1:sim, bootsfit,
N = N, lambda1 = lambda1, lambda2 = lambda2,
tau = tau,
CL = CL, CU = CU, seed = seed, maxiter = maxiter,
increment = increment, quadpoint = quadpoint)
parallel::stopCluster(cl)
devtools::load_all()
library(JMH)
ncores = 10
sim = 10
N =200
lambda1 = 0.05
lambda2 = 0.1
tau = c(0.5, 0.5, -0.2, 0.2, 0.05)
CL = 4
CU = 8
seed = 10
increment = 0.25
maxiter = 1000
quadpoint=15
cl <- parallel::makeCluster(ncores)
ParaMatrixRaw <- parallel::parLapply(cl, 1:sim, bootsfit,
N = N, lambda1 = lambda1, lambda2 = lambda2,
tau = tau,
CL = CL, CU = CU, seed = seed, maxiter = maxiter,
increment = increment, quadpoint = quadpoint)
parallel::stopCluster(cl)
ParaMatrixRaw
a <- JMH::simfit(sim = 100, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 15, ncores = 10)
a <- JMH::simfit(sim = 20, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 15, ncores = 8)
View(a)
a <- JMH::simfit(sim = 50, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 15, ncores = 8)
cl <- parallel::makeCluster(ncores)
ParaMatrixRaw <- parallel::parLapply(cl, 21:50, bootsfit,
N = N, lambda1 = lambda1, lambda2 = lambda2,
tau = tau,
CL = CL, CU = CU, seed = seed, maxiter = maxiter,
increment = increment, quadpoint = quadpoint)
parallel::stopCluster(cl)
cl <- parallel::makeCluster(ncores)
ParaMatrixRaw <- parallel::parLapply(cl, 21:35, bootsfit,
N = N, lambda1 = lambda1, lambda2 = lambda2,
tau = tau,
CL = CL, CU = CU, seed = seed, maxiter = maxiter,
increment = increment, quadpoint = quadpoint)
parallel::stopCluster(cl)
cl <- parallel::makeCluster(ncores)
ParaMatrixRaw <- parallel::parLapply(cl, 36:50, bootsfit,
N = N, lambda1 = lambda1, lambda2 = lambda2,
tau = tau,
CL = CL, CU = CU, seed = seed, maxiter = maxiter,
increment = increment, quadpoint = quadpoint)
parallel::stopCluster(cl)
ncores <- 7
cl <- parallel::makeCluster(ncores)
ParaMatrixRaw <- parallel::parLapply(cl, 36:42, bootsfit,
N = N, lambda1 = lambda1, lambda2 = lambda2,
tau = tau,
CL = CL, CU = CU, seed = seed, maxiter = maxiter,
increment = increment, quadpoint = quadpoint)
parallel::stopCluster(cl)
for (j in 36:42) {
writeLines(paste0("Now is running ", j, "th sample!"))
data <- simJMdata(N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100 + j,
increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
#devtools::load_all()
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, ID = "ID", RE = "time",
model = "interslope", print.para = FALSE)
b <- proc.time()
(b - a)[3]
}
ParaMatrixRaw <- parallel::mclapply(36:42, bootsfit,
N = N, lambda1 = lambda1, lambda2 = lambda2,
tau = tau,
CL = CL, CU = CU, seed = seed, maxiter = maxiter,
increment = increment, quadpoint = quadpoint,
mc.cores = ncores)
paramatrix <- as.data.frame(matrix(0, nrow = 7, ncol = 29))
for (i in 1:7) {
paramatrix[i, ] <- ParaMatrixRaw[[i]]
}
View(paramatrix)
devtools::load_all()
devtools::load_all()
devtools::load_all()
library(JMH)
N200q15 <- JMH::simfit(sim = 100, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 15, ncores = 10)
View(N200q15)
library(JMH)
devtools::load_all()
library(JMH)
devtools::load_all()
library(JMH)
N400q15 <- JMH::simfit(sim = 100, N = 400, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 15, ncores = 10)
N400q20 <- JMH::simfit(sim = 100, N = 400, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 20, ncores = 10)
save.image("~/Desktop/GSR CODES/2021/2021 summer/JMHSim/N400q1520.RData")
load("~/Desktop/GSR CODES/2021/2021 summer/JMHSim/N400q1520.RData")
N400q20 <- JMH::simfit(sim = 100, N = 400, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 20, ncores = 10)
devtools::load_all()
library(JMH)
j = 1
writeLines(paste0("Now is running ", j, "th sample!"))
data <- simJMdata(N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100 + j,
increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, ID = "ID", RE = "time",
model = "interslope", print.para = TRUE)
b <- proc.time()
(b - a)[3]
j = 3
writeLines(paste0("Now is running ", j, "th sample!"))
data <- simJMdata(N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100 + j,
increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
#devtools::load_all()
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, ID = "ID", RE = "time",
model = "interslope", print.para = TRUE)
b <- proc.time()
(b - a)[3]
fit$alpha1
N400q20 <- JMH::simfit(sim = 100, N = 400, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 20, ncores = 10)
View(N400q20)
source('~/Desktop/GSR CODES/2021/2021 summer/JMHSim/Getbias.R')
a <- Getbias(N400q20)
View(a)
save.image("~/Desktop/GSR CODES/2021/2021 summer/JMHSim/N400q1520.RData")
N200q20 <- JMH::simfit(sim = 100, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 20, ncores = 10)
N200q25 <- JMH::simfit(sim = 100, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 25, ncores = 10)
View(N200q20)
View(N200q25)
save.image("~/Desktop/GSR CODES/2021/2021 summer/JMHSim/N400q1520.RData")
N400q25 <- JMH::simfit(sim = 100, N = 400, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 25, ncores = 10)
save.image("~/Desktop/GSR CODES/2021/2021 summer/JMHSim/N400q1520.RData")
N400q25 <- JMH::simfit(sim = 100, N = 400, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 25, ncores = 10)
save.image("~/Desktop/GSR CODES/2021/2021 summer/JMHSim/N400q1520.RData")
N200q30 <- JMH::simfit(sim = 100, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 25, ncores = 10)
N200q30 <- JMH::simfit(sim = 100, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 30, ncores = 10)
save.image("~/Desktop/GSR CODES/2021/2021 summer/JMHSim/N400q1520.RData")
N400q30 <- JMH::simfit(sim = 100, N = 400, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 30, ncores = 10)
save.image("~/Desktop/GSR CODES/2021/2021 summer/JMHSim/N400q1520.RData")
N200q35 <- JMH::simfit(sim = 100, N = 200, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 35, ncores = 10)
save.image("~/Desktop/GSR CODES/2021/2021 summer/JMHSim/N400q1520.RData")
N400q35 <- JMH::simfit(sim = 100, N = 400, lambda1 = 0.05, lambda2 = 0.1,
tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
CL = 4, CU = 8, seed = 100, maxiter = 1000,
increment = 0.25, quadpoint = 35, ncores = 11)
save.image("~/Desktop/GSR CODES/2021/2021 summer/JMHSim/N400q1520.RData")
