lambdaC = 0.05, lambda = 0.3, increment = 2,
gamma = c(-0.5, 0.2, -0.1),
eta = c(0.7, 0.1))
Ydata <- data$Ydata
Sdata <- data$Sdata
Tdata <- data$Tdata
fit <- try(JMMLSM(cdata = Tdata, ydata = Ydata,
long.formula = Yij ~ Si + X11 + X12 + tij,
surv.formula = Surv(Ti, status) ~ X21 + X22 + Si,
variance.formula = ~ Si + X11 + X12 + tij, maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, random = ~ 1|ID, print.para = TRUE), silent = TRUE)
if ('try-error' %in% class(fit)) {
count <- count + 1
} else {
taumatrix[i, ] <- fit$tau
writeLines(paste0(i, " th simulaiton done!"))
i <- i + 1
}
count <- count + 1
}
taumatrix <- matrix(0, nrow = 100, ncol = 5)
i = 1
count <- 1
while(i <= 100) {
data <- SimSYTdataRI(seed = 99 + count, nc = 2000, n = 500, Cint = 10, phi = 0.04,
lambdaC = 0.05, lambda = 0.3, increment = 2,
gamma = c(-0.5, 0.2, -0.1),
eta = c(0.7, 0.1))
Ydata <- data$Ydata
Sdata <- data$Sdata
Tdata <- data$Tdata
fit <- try(JMMLSM(cdata = Tdata, ydata = Ydata,
long.formula = Yij ~ Si + X11 + X12 + tij,
surv.formula = Surv(Ti, status) ~ X21 + X22 + Si,
variance.formula = ~ Si + X11 + X12 + tij, maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, random = ~ 1|ID, print.para = TRUE), silent = TRUE)
if ('try-error' %in% class(fit)) {
count <- count + 1
} else {
taumatrix[i, ] <- fit$tau
writeLines(paste0(i, " th simulaiton done!"))
i <- i + 1
}
count <- count + 1
}
View(taumatrix)
colMeans(taumatrix)
taumatrix <- matrix(0, nrow = 100, ncol = 5)
i = 1
count <- 1
while(i <= 100) {
data <- SimSYTdataRI(seed = 99 + count, nc = 2000, n = 1000, Cint = 10, phi = 0.04,
lambdaC = 0.05, lambda = 0.3, increment = 2,
gamma = c(-0.5, 0.2, -0.1),
eta = c(0.7, 0.1))
Ydata <- data$Ydata
Sdata <- data$Sdata
Tdata <- data$Tdata
fit <- try(JMMLSM(cdata = Tdata, ydata = Ydata,
long.formula = Yij ~ Si + X11 + X12 + tij,
surv.formula = Surv(Ti, status) ~ X21 + X22 + Si,
variance.formula = ~ Si + X11 + X12 + tij, maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, random = ~ 1|ID, print.para = TRUE), silent = TRUE)
if ('try-error' %in% class(fit)) {
count <- count + 1
} else {
taumatrix[i, ] <- fit$tau
writeLines(paste0(i, " th simulaiton done!"))
i <- i + 1
}
count <- count + 1
}
colMeans(taumatrix)
a <- proc.time()
taumatrix <- matrix(0, nrow = 100, ncol = 5)
i = 1
count <- 1
while(i <= 100) {
data <- SimSYTdataRI(seed = 99 + count, nc = 2000, n = 500, Cint = 10, phi = 0.04,
lambdaC = 0.05, lambda = 0.3, increment = 2,
gamma = c(-0.5, 0.2, -0.1),
eta = c(0.7, 0.1))
Ydata <- data$Ydata
Sdata <- data$Sdata
Tdata <- data$Tdata
fit <- try(JMMLSM(cdata = Tdata, ydata = Ydata,
long.formula = Yij ~ Si + X11 + X12 + tij,
surv.formula = Surv(Ti, status) ~ X21 + X22 + Si,
variance.formula = ~ Si + X11 + X12 + tij, maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, random = ~ 1|ID, print.para = TRUE), silent = TRUE)
if ('try-error' %in% class(fit)) {
count <- count + 1
} else {
taumatrix[i, ] <- fit$tau
writeLines(paste0(i, " th simulaiton done!"))
i <- i + 1
count <- count + 1
}
}
b <- proc.time()
b - a
devtools::load_all()
devtools::load_all()
install.packages("glmnet")
load("~/Desktop/test.RData")
devtools::load_all()
getcov <- getCovSF(beta, tau, gamma1, alpha1, vee1, H01, Sig, Z, X1, W, Y,
X2, survtime, cmprsk, mdata, mdataS,
FUNENW, FUNBENW, FUNBS, FUNBW, FUNWS, FUNBSENW, FUNEC, FUNBEC,
FUNBSEC, FUNWEC, FUNWSEC,FUNB, FUNW)
getcov$vcov
vcov <- getcov$vcov
seSig <- getcov$seSig
sebeta <- vector()
setau <- vector()
segamma1 <- vector()
sealpha1 <- vector()
for (i in 1:length(beta)) sebeta[i] <- sqrt(vcov[i, i])
for (i in 1:length(tau)) setau[i] <- sqrt(vcov[length(beta)+i, length(beta)+i])
for (i in 1:length(gamma1)) segamma1[i] <- sqrt(vcov[length(beta)+length(tau)+i,
length(beta)+length(tau)+i])
for (i in 1:length(alpha1)) sealpha1[i] <- sqrt(vcov[length(beta)+length(tau)+length(gamma1)+i,
length(beta)+length(tau)+length(gamma1)+i])
sevee1 <- sqrt(vcov[length(beta)+length(tau)+length(gamma1)+length(alpha1)+1,
length(beta)+length(tau)+length(gamma1)+length(alpha1)+1])
devtools::load_all()
rlang::last_error()
devtools::load_all()
data <- simJMdataRISF(seed = 100, N = 100, tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
lambda1 = 0.05, CL = 4, CU = 20,
increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.formula = ~ Z1 + Z2 + Z3 + time, maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, random = ~ 1|ID, print.para = TRUE)
b <- proc.time()
fit
data <- simJMdataRISF(seed = 100, N = 1000, tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
lambda1 = 0.05, CL = 4, CU = 20,
increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.formula = ~ Z1 + Z2 + Z3 + time, maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, random = ~ 1|ID, print.para = TRUE)
b <- proc.time()
devtools::load_all()
data <- simJMdataRISF(seed = 100, N = 1000, tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
lambda1 = 0.05, CL = 4, CU = 20,
increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.formula = ~ Z1 + Z2 + Z3 + time, maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, random = ~ 1|ID, print.para = TRUE)
b <- proc.time()
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.formula = ~ Z1 + Z2 + Z3 + time, maxiter = 1000, epsilon = 1e-04,
quadpoint = 20, random = ~ 1|ID, print.para = TRUE)
b <- proc.time()
data <- simJMdataRISF(seed = 1002, N = 1000, tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
lambda1 = 0.05, CL = 4, CU = 20,
increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.formula = ~ Z1 + Z2 + Z3 + time, maxiter = 1000, epsilon = 1e-04,
quadpoint = 20, random = ~ 1|ID, print.para = TRUE)
b <- proc.time()
fit$H01
fit$CompetingRisk
devtools::load_all()
View(ydata)
View(cdata)
data <- simJMdataRISF(seed = 1002, N = 1000, tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
lambda1 = 0.05, CL = 4, CU = 20,
increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
data <- simJMdataRISF(seed = 1002, N = 1000, tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
lambda1 = 0.05, CL = 4, CU = 20,
increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
cnewdata <- cdata[cdata$ID %in% c(145, 107), ]
ynewdata <- ydata[ydata$ID %in% c(145, 107), ]
?seq
cnewdata <- cdata[cdata$ID %in% c(145, 107), ]
ynewdata <- ydata[ydata$ID %in% c(145, 107), ]
View(cnewdata)
max(fit$H01[, 1])
a <- survfitJMMLSM(fit, seed = 100, ynewdata = ynewdata, cnewdata = cnewdata,
u = seq(from = 5, to = 15, by = 1), M = 200, simulate = TRUE, quadpoint = 20)
devtools::load_all()
a <- survfitJMMLSM(fit, seed = 100, ynewdata = ynewdata, cnewdata = cnewdata,
u = seq(from = 5, to = 15, by = 1), M = 200, simulate = TRUE, quadpoint = 20)
vcov(fit)
devtools::load_all()
a <- survfitJMMLSM(fit, seed = 100, ynewdata = ynewdata, cnewdata = cnewdata,
u = seq(from = 5, to = 15, by = 1), M = 200, simulate = TRUE, quadpoint = 20)
a <- survfitJMMLSM(fit, seed = 100, ynewdata = ynewdata, cnewdata = cnewdata,
u = seq(from = 5, to = 15, by = 1), M = 200, simulate = TRUE)
devtools::load_all()
a <- survfitJMMLSM(fit, seed = 100, ynewdata = ynewdata, cnewdata = cnewdata,
u = seq(from = 5, to = 15, by = 1), M = 200, simulate = TRUE)
devtools::load_all()
a <- survfitJMMLSM(fit, seed = 100, ynewdata = ynewdata, cnewdata = cnewdata,
u = seq(from = 5, to = 15, by = 1), M = 200, simulate = TRUE)
devtools::load_all()
a <- survfitJMMLSM(fit, seed = 100, ynewdata = ynewdata, cnewdata = cnewdata,
u = seq(from = 5, to = 15, by = 1), M = 200, simulate = TRUE)
fit$beta
fit$tau
fit$gamma1
fit$alpha1
vcov(fit)
nrow(vcov(fit))
object <- fit
nbeta <- length(object$beta)
ntau <- length(object$tau)
ngamma <- length(object$gamma1)
nalpha <- length(object$alpha1)
nnu <- 1
nsig <- nrow(object$Sig)
lengthu <- length(u)
if (!object$CompetingRisk) {
Psi <- c(object$beta, object$tau, object$gamma1, object$alpha1, object$nu1)
for (l in 1:nsig) Psi <- c(Psi, object$Sig[l, l])
if (nsig == 2) Psi <- c(Psi, object$Sig[1, 2])
if (nsig == 3) {
Psi <- c(Psi, object$Sig[1, 2])
Psi <- c(Psi, object$Sig[2, 3])
Psi <- c(Psi, object$Sig[1, 3])
}
}
Psi
length(Psi)
devtools::load_all()
a <- survfitJMMLSM(fit, seed = 100, ynewdata = ynewdata, cnewdata = cnewdata,
u = seq(from = 5, to = 15, by = 1), M = 200, simulate = TRUE)
bw <- c(0, 0)
p1a = 1
bw[1:p1a]
bw[1]
as.vector(bw[1:p1a])
devtools::load_all()
a <- survfitJMMLSM(fit, seed = 100, ynewdata = ynewdata, cnewdata = cnewdata,
u = seq(from = 5, to = 15, by = 1), M = 200, simulate = TRUE)
cnewdata <- cdata[cdata$ID %in% c(145, 107), ]
ynewdata <- ydata[ydata$ID %in% c(145, 107), ]
object,
seed = 100
u = seq(from = 5, to = 15, by = 1)
M = 200,
simulate = TRUE
quadpoint = NULL
cnewdata <- cdata[cdata$ID %in% c(145, 107), ]
ynewdata <- ydata[ydata$ID %in% c(145, 107), ]
object <- fit
seed = 100
u = seq(from = 5, to = 15, by = 1)
M = 200,
simulate = TRUE
quadpoint = NULL
cnewdata <- cdata[cdata$ID %in% c(145, 107), ]
ynewdata <- ydata[ydata$ID %in% c(145, 107), ]
object <- fit
seed = 100
u = seq(from = 5, to = 15, by = 1)
M = 200
simulate = TRUE
quadpoint = NULL
if (!inherits(object, "JMMLSM"))
stop("Use only with 'JMMLSM' objects.\n")
if (is.null(ynewdata))
stop("New longitudinal data for dynamic prediction is needed.")
if (is.null(cnewdata))
stop("New longitudinal data for dynamic prediction is needed.")
if (is.null(u))
stop("Please specify the future time for dynamic prediction.")
if (!is.vector(u))
stop("u must be vector typed.")
if (!object$CompetingRisk) {
H01 <- object$H01
if (max(u) > H01[nrow(H01), 1])
stop(paste("The current joint model cannot predict the conditional
survival probabilities later than the last observed time of the object.
The last observed time is", max(H01[, 1])))
} else {
H01 <- object$H01
H02 <- object$H02
if (max(u) > H01[nrow(H01), 1] | max(u) > H02[nrow(H02), 1])
stop(paste("The current joint model cannot predict the conditional
survival probabilities later than the last observed time of the object.
The last observed time for risk 1 and 2 is", max(H01[, 1]), "and", max(H02[, 1])))
}
bvar <- all.vars(object$random)
if (!(bvar[length(bvar)] %in% colnames(ynewdata)))
stop(paste("The ID variable", bvar[length(bvar)], "is not found in ynewdata."))
if (!(bvar[length(bvar)] %in% colnames(cnewdata)))
stop(paste("The ID variable", bvar[length(bvar)], "is not found in cnewdata."))
ydata2 <- rbind(object$ydata, ynewdata)
cdata2 <- rbind(object$cdata, cnewdata)
variance.formula <- as.formula(paste("", object$LongitudinalSubmodelvariance[3], sep = "~"))
getdum <- getdummy(long.formula = object$LongitudinalSubmodelmean,
surv.formula = object$SurvivalSubmodel,
variance.formula = variance.formula,
random = object$random, ydata = ydata2, cdata = cdata2)
ydata.mean <- getdum$ydata.mean
ydata.variance <- getdum$ydata.variance
cdata2 <- getdum$cdata
Cvar <- colnames(cdata2)[-1]
bvar <- all.vars(object$random)
ny <- nrow(ynewdata)
nc <- nrow(cnewdata)
Ny <- nrow(ydata2)
Nc <- nrow(cdata2)
ynewdata.mean <- ydata.mean[c((Ny-ny+1):Ny), ]
ynewdata.variance <- ydata.variance[c((Ny-ny+1):Ny), ]
cnewdata <- cdata2[c((Nc-nc+1):Nc), ]
## dynamic prediction
## Monte Carlo simulation
ID <- unique(ynewdata.mean[, bvar[length(bvar)]])
N.ID <- length(ID)
cID <- cnewdata[, bvar[length(bvar)]]
if (prod(ID == cID) == 0) {
stop("The order of subjects in ydata doesn't match with cnewdata.")
}
set.seed(seed)
nbeta <- length(object$beta)
ntau <- length(object$tau)
ngamma <- length(object$gamma1)
nalpha <- length(object$alpha1)
nnu <- 1
nsig <- nrow(object$Sig)
lengthu <- length(u)
if (!object$CompetingRisk) {
Psi <- c(object$beta, object$tau, object$gamma1, object$alpha1, object$vee1)
for (l in 1:nsig) Psi <- c(Psi, object$Sig[l, l])
if (nsig == 2) Psi <- c(Psi, object$Sig[1, 2])
if (nsig == 3) {
Psi <- c(Psi, object$Sig[1, 2])
Psi <- c(Psi, object$Sig[2, 3])
Psi <- c(Psi, object$Sig[1, 3])
}
covPsi <- vcov(object)
Psi.MC <- mvrnorm(n = M, Psi, covPsi, tol = 1e-6, empirical = FALSE)
Pred <- list()
y.obs <- list()
if (length(bvar) > 1) bvar1 <- bvar[1:(length(bvar) - 1)]
j = 1
}
subNDy.mean <- ynewdata.mean[ynewdata.mean[, bvar[length(bvar)]] == ID[j], ]
View(subNDy.mean)
subNDy.variance <- ynewdata.variance[ynewdata.variance[, bvar[length(bvar)]] == ID[j], ]
subNDc <- cnewdata[cnewdata[, bvar[length(bvar)]] == ID[j], ]
y.obs[[j]] <- data.frame(subNDy.mean[, c(1, 2)])
View(y.obs)
allPi <- matrix(0, ncol = length(u), nrow = M)
CH0 <- CH(H01, subNDc[, Cvar[1]])
CH0u <- vector()
for (jj in 1:lengthu) {
CH0u[jj] <- CH(H01, u[jj])
}
Y <- subNDy.mean[, 2]
X <- subNDy.mean[, -c(1:2)]
X <- as.matrix(X)
W <- subNDy.variance[, -1]
W <- as.matrix(W)
X
if (nsig == 2) {
Z <- matrix(1, ncol = 1, nrow = length(Y))
} else {
Z <- data.frame(1, subNDy.mean[, bvar1])
Z <- as.matrix(Z)
}
Z
X2 <- as.matrix(subNDc[, -c(1:3)])
X2
i = 1
psil <- Psi.MC[i, ]
betal <- psil[1:nbeta]
taul <- psil[(nbeta+1):(nbeta+ntau)]
gammal <- psil[(nbeta+ntau+1):(nbeta+ntau+ngamma)]
alphal <- psil[(nbeta+ntau+ngamma+1):(nbeta+ntau+ngamma+nalpha)]
nul <- psil[nbeta+ntau+ngamma+nalpha+1]
Sigl <- matrix(0, ncol = nsig, nrow = nsig)
for (l in 1:nsig) Sigl[l, l] <- psil[nbeta+ntau+ngamma+nalpha+1+l]
if (nsig == 2) Sigl[1, 2] <- Sigl[2, 1] <- psil[nbeta+ntau+ngamma+nalpha+1+nsig+1]
if (nsig == 3) {
Sigl[1, 2] <- Sigl[2, 1] <- psil[nbeta+ntau+ngamma+nalpha+1+nsig+1]
Sigl[2, 3] <- Sigl[3, 2] <- psil[nbeta+ntau+ngamma+nalpha+1+nsig+2]
Sigl[1, 3] <- Sigl[3, 1] <- psil[nbeta+ntau+ngamma+nalpha+1+nsig+3]
}
data <- list(Y, X, Z, W, X2, CH0, betal, taul, gammal, alphal, nul, Sigl)
names(data) <- c("Y", "X", "Z", "W", "X2", "CH0", "beta", "tau", "gamma", "alpha", "nu", "Sig")
opt <- optim(rep(0, nsig), logLik, data = data, method = "BFGS", hessian = TRUE)
meanb <- opt$par
meanb
meanb <- opt$par
varb <- solve(opt$hessian)
b.old <- meanb
propose.bl <- as.vector(mvtnorm::rmvt(1, delta = meanb, sigma = varb, df = 4))
dmvt.old <- mvtnorm::dmvt(b.old, meanb, varb, df = 4, TRUE)
dmvt.propose <- mvtnorm::dmvt(propose.bl, meanb, varb, df = 4, TRUE)
logpost.old <- -logLik(data, b.old)
logpost.propose <- -logLik(data, propose.bl)
ratio <- min(exp(logpost.propose + dmvt.old - logpost.old - dmvt.propose), 1)
if (runif(1) <= ratio) {
bl = propose.bl
} else {
bl = b.old
}
for (jj in 1:lengthu) {
Pi <- P.us(data, CH0u[jj], bl)
allPi[i, jj] <- Pi
}
devtools::load_all()
for (jj in 1:lengthu) {
Pi <- P.us(data, CH0u[jj], bl)
allPi[i, jj] <- Pi
}
devtools::load_all()
for (jj in 1:lengthu) {
Pi <- P.us(data, CH0u[jj], bl)
allPi[i, jj] <- Pi
}
data <- simJMdataRISF(seed = 1002, N = 1000, tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
lambda1 = 0.05, CL = 4, CU = 20,
increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.formula = ~ Z1 + Z2 + Z3 + time, maxiter = 1000, epsilon = 1e-04,
quadpoint = 20, random = ~ 1|ID, print.para = TRUE)
b <- proc.time()
cnewdata <- cdata[cdata$ID %in% c(145, 107), ]
ynewdata <- ydata[ydata$ID %in% c(145, 107), ]
data <- simJMdataRISF(seed = 1002, N = 100, tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
lambda1 = 0.05, CL = 4, CU = 20,
increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.formula = ~ Z1 + Z2 + Z3 + time, maxiter = 1000, epsilon = 1e-04,
quadpoint = 20, random = ~ 1|ID, print.para = TRUE)
b <- proc.time()
cnewdata <- cdata[cdata$ID %in% c(145, 107), ]
ynewdata <- ydata[ydata$ID %in% c(145, 107), ]
data <- simJMdataRISF(seed = 1002, N = 500, tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
lambda1 = 0.05, CL = 4, CU = 20,
increment = 0.25)
ydata <- data$ydata
cdata <- data$cdata
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.formula = ~ Z1 + Z2 + Z3 + time, maxiter = 1000, epsilon = 1e-04,
quadpoint = 20, random = ~ 1|ID, print.para = TRUE)
b <- proc.time()
a <- proc.time()
fit <- JMMLSM(cdata = cdata, ydata = ydata,
long.formula = Y ~ Z1 + Z2 + Z3 + time,
surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
variance.formula = ~ Z1 + Z2 + Z3 + time, maxiter = 1000, epsilon = 1e-04,
quadpoint = 15, random = ~ 1|ID, print.para = TRUE)
b <- proc.time()
cnewdata <- cdata[cdata$ID %in% c(145, 107), ]
ynewdata <- ydata[ydata$ID %in% c(145, 107), ]
a <- survfitJMMLSM(fit, seed = 100, ynewdata = ynewdata, cnewdata = cnewdata,
u = seq(from = 5, to = 15, by = 1), M = 200, simulate = TRUE)
devtools::load_all()
a
devtools::document()
a
class(a)
View(cnewdata)
a$Last.time
View(cdata)
cnewdata <- cdata[cdata$ID %in% c(402, 107), ]
ynewdata <- ydata[ydata$ID %in% c(402, 107), ]
a <- survfitJMMLSM(fit, seed = 100, ynewdata = ynewdata, cnewdata = cnewdata,
u = seq(from = 5, to = 15, by = 1), M = 200, simulate = TRUE)
a
JMH::print.survfitJMMLSM(a)
a
JMH::print.survfitJMMLSM(a)
a
isClass(a)
