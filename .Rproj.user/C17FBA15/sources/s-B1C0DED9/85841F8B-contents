devtools::load_all()
for (j in 1:10) {
  writeLines(paste0("Now is running ", j, "th sample!"))
  data <- simJMdata(N = 200, lambda1 = 0.05, lambda2 = 0.1,
                         tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
                         CL = 4, CU = 8, seed = 10 + j,
                         increment = 0.25)
  ydata <- data$ydata
  cdata <- data$cdata
  
  #devtools::load_all()
  a <- proc.time()
  fit <- JMMLSM(cdata = cdata, ydata = ydata, 
                     long.formula = Y ~ Z1 + Z2 + Z3 + time,
                     surv.formula = Surv(survtime, cmprsk) ~ var1 + var2 + var3,
                     variance.var = c("Z1", "Z2", "Z3", "time"), maxiter = 1000, epsilon = 1e-04, 
                     quadpoint = 15, ID = "ID", RE = "time",
                     model = "interslope", print.para = FALSE)
  b <- proc.time()
  (b - a)[3]
}


a <- JMH::simfit(sim = 50, N = 200, lambda1 = 0.05, lambda2 = 0.1,
                 tau = c(0.5, 0.5, -0.2, 0.2, 0.05),
                 CL = 4, CU = 8, seed = 100, maxiter = 1000,
                 increment = 0.25, quadpoint = 15, ncores = 8)

beta = c(5, 1.5, 2, 1, 2)
tau = c(0.5, 0.5, -0.2, 0.2, 0.05)
gamma1 = c(1, 0.5, 0.5)
gamma2 = c(-0.5, 0.5, 0.25)
alpha1 = c(1, 0.7)
alpha2 = c(-1, -0.5)
vee1 = 0.5
vee2 = -0.5
Sig <- matrix(c(0.5, 0.25, 0.25, 0.25, 0.5, 0.25, 0.25, 0.25, 0.5), nrow = 3, ncol = 3)

ncores = 10
sim = 10
N =200
lambda1 = 0.05
lambda2 = 0.1
tau = c(0.5, 0.5, -0.2, 0.2, 0.05)
CL = 4
CU = 8
seed = 100
increment = 0.25
maxiter = 1000
quadpoint=15
ncores <- 7
cl <- parallel::makeCluster(ncores)
ParaMatrixRaw <- parallel::parLapply(cl, 36:42, bootsfit,
                                     N = N, lambda1 = lambda1, lambda2 = lambda2,
                                     tau = tau,
                                     CL = CL, CU = CU, seed = seed, maxiter = maxiter,
                                     increment = increment, quadpoint = quadpoint)
parallel::stopCluster(cl)

